<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tdd on Adrian Moya</title>
    <link>http://adrianmoya.com/categories/tdd/</link>
    <description>Recent content in Tdd on Adrian Moya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-us</language>
    <lastBuildDate>Fri, 16 Sep 2016 14:51:09 -0500</lastBuildDate>
    
	<atom:link href="http://adrianmoya.com/categories/tdd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pensando TDD (I)</title>
      <link>http://adrianmoya.com/post/pensando-tdd-i/</link>
      <pubDate>Fri, 16 Sep 2016 14:51:09 -0500</pubDate>
      
      <guid>http://adrianmoya.com/post/pensando-tdd-i/</guid>
      <description>Siempre escuchamos que TDD es una técnica de diseño que es guiada por pruebas. Pero dado que tenemos que escribir la prueba primero, nuestra mente comienza a pensar en términos de pruebas en lugar de diseño. Entonces comenzamos a pensar en casos borde, malas entradas, y cosas que son importante pensar, pero desvían nuestra atención del objetivo principal de la técnica, que es diseñar.
En esta entrada voy a volcar mi tren de pensamientos cuando diseño a través de TDD, para que puedan contrastar la diferencia acerca de pensar enfocado en pruebas y pensar acerca de diseño.</description>
    </item>
    
    <item>
      <title>TDD o no TDD</title>
      <link>http://adrianmoya.com/post/tdd-o-no-tdd/</link>
      <pubDate>Fri, 18 Dec 2015 07:14:08 -0800</pubDate>
      
      <guid>http://adrianmoya.com/post/tdd-o-no-tdd/</guid>
      <description>&lt;p&gt;No cabe duda de que escribir pruebas unitarias para nuestro código en los proyectos es una práctica excelente que rinde grandes beneficios. Sin embargo, en este artículo quiero tratar el tema de si debo escribir las pruebas primero que el código de producción (técnica conocida como TDD), o si debo cubrir el código con pruebas (escribirlas después del código de producción).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Aumentando la expresividad de nuestras especificaciones</title>
      <link>http://adrianmoya.com/2013/09/aumentando-la-expresividad-de-nuestras-especificaciones/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://adrianmoya.com/2013/09/aumentando-la-expresividad-de-nuestras-especificaciones/</guid>
      <description>&lt;p&gt;En el post anterior, vimos como &lt;a href=&#34;http://adrianmoya.com/2013/07/utilizando-el-patron-databuilder-en-nuestras-pruebas-unitarias/&#34;&gt;aplicar el patrón databuilder&lt;/a&gt; puede ayudarnos a escribir el contexto inicial de nuestras especificaciones de manera más clara. En este artículo describiré algunas técnicas adicionales que ayudan a mejorar la expresividad de las pruebas.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>